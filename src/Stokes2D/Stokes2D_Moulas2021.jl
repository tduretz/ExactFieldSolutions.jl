function ComputeConstants( params )
    @unpack θ1, θ2, η1, η2, Vr0, Vt0, Vr2, Vt2 = params
    A1 = -Vt0
    B1 = ((sin(θ1)^2*(η1*η2*cos(θ2)^2+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1*η2*sin(θ2)^2+η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)))*Vr0+(
         sin(θ1)^2*(η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η2^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)^2*
         (η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η2^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1*η2*(sin(θ2)^2+cos(θ2)^2)))*Vt0+cos(θ1)*sin(θ1)*(η2^2*(sin(θ2)*Vr2+cos(θ2)*Vt2)+η1*η2*(-1.0*sin(θ2)*Vr2-1.0*cos(θ2)*Vt2))+
         sin(θ1)^2*
         (θ1*(η1*η2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η2^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η1*η2*((θ2*sin(θ2)+cos(θ2))*Vr2+θ2*cos(θ2)*Vt2))
         +cos(θ1)^2*(θ1*(η1*η2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η1*η2*(θ2*sin(θ2)*Vr2+θ2*cos(θ2)*Vt2+sin(θ2)*Vt2)))/(sin(θ1)^2*(2.0*η1*
         η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    C1  = -(1.0*((sin(θ1)^2*(η2^2*(sin(θ2)^2+cos(θ2)^2)-1.0*η1*η2*cos(θ2)^2)+η1*η2*cos(θ1)^2*sin(θ2)^2)*Vr0+(sin(θ1)^2*
         (η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η2^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)^2*
         (η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η2^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1*η2*(sin(θ2)^2+cos(θ2)^2)))*Vt0+cos(θ1)*sin(θ1)*(η2^2*(sin(θ2)*Vr2+cos(θ2)*Vt2)+η1*η2*(-1.0*sin(θ2)*Vr2-1.0*cos(θ2)*Vt2))+
         sin(θ1)^2*
         (θ1*(η1*η2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η2^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η1*η2*((θ2*sin(θ2)+cos(θ2))*Vr2+θ2*cos(θ2)*Vt2))
         +cos(θ1)^2*(θ1*(η1*η2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η1*η2*(θ2*sin(θ2)*Vr2+θ2*cos(θ2)*Vt2+sin(θ2)*Vt2))))/(sin(θ1)^2*(2.0*η1*
         η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    D1 = -(1.0*((sin(θ1)^2*(η1*η2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)+θ1*(η2^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)^2*
         (η1*η2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)+θ1*(η2^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1*η2*(sin(θ2)^2+cos(θ2)^2)))*Vr0+(sin(θ1)^2*(η1*η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2))-1.0*η1*η2*cos(θ1)^2*sin(θ2)^2)*
         Vt0+cos(θ1)*sin(θ1)*(η1*η2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η2^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2))+cos(θ1)^2*
         (θ1*(η1*η2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η2^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2))+η1*η2*((sin(θ2)-1.0*θ2*cos(θ2))*Vr2+θ2*sin(θ2)*Vt2))+sin(θ1)^2*(θ1*
         (η1*η2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η2^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2))+η1*η2*(-1.0*θ2*cos(θ2)*Vr2-1.0*cos(θ2)*Vt2+θ2*sin(θ2)*Vt2)+η2^2*(sin(θ2)*Vr2+cos(θ2)*Vt2))
         ))/(sin(θ1)^2*(2.0*η1*η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    A2 = -(1.0*((sin(θ1)^2*
         (θ1*(η1*η2*sin(θ2)^2-1.0*η1^2*sin(θ2)^2)+η1*η2*(-1.0*θ2*sin(θ2)^2+cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+η1^2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2))+θ1*
         cos(θ1)^2*(η1*η2*sin(θ2)^2-1.0*η1^2*sin(θ2)^2)+cos(θ1)*sin(θ1)*(η1^2*sin(θ2)^2-1.0*η1*η2*sin(θ2)^2))*Vr0+(sin(θ1)^2*(-1.0*η1*η2*sin(θ2)^2+η1^2*
         (θ2^2*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1*(η1*η2*(θ2*cos(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*sin(θ2)^2)+η1^2*(-1.0*θ2*cos(θ2)^2+cos(θ2)*sin(θ2)-1.0*θ2*sin(θ2)^2)))+cos(θ1)^2*
         (η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1*(η1*η2*(θ2*cos(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*sin(θ2)^2)+η1^2*(-1.0*θ2*cos(θ2)^2+cos(θ2)*sin(θ2)-1.0*θ2*sin(θ2)^2)))+
         cos(θ1)*sin(θ1)*(η1^2*(-1.0*θ2*sin(θ2)^2+cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+η1*η2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)))*Vt0+cos(θ1)*sin(θ1)*
         (η1^2*(θ2*sin(θ2)*Vr2+θ2*cos(θ2)*Vt2+sin(θ2)*Vt2)+η1*η2*(-1.0*θ2*sin(θ2)*Vr2-1.0*θ2*cos(θ2)*Vt2-1.0*sin(θ2)*Vt2))+cos(θ1)^2*(θ1*
         (η1^2*(-1.0*sin(θ2)*Vt2-1.0*θ2*cos(θ2)*Vt2-1.0*θ2*sin(θ2)*Vr2)+η1*η2*(sin(θ2)*Vt2+θ2*cos(θ2)*Vt2+θ2*sin(θ2)*Vr2))+θ1^2*
         (η1*η2*(-2.0*cos(θ2)*Vt2-2.0*sin(θ2)*Vr2)+η1^2*(cos(θ2)*Vt2+sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2)))+sin(θ1)^2*(θ1*
         (η1^2*(-1.0*sin(θ2)*Vt2-1.0*θ2*cos(θ2)*Vt2-1.0*θ2*sin(θ2)*Vr2)+η1*η2*(sin(θ2)*Vt2+θ2*cos(θ2)*Vt2+θ2*sin(θ2)*Vr2))+θ1^2*
         (η1*η2*(-2.0*cos(θ2)*Vt2-2.0*sin(θ2)*Vr2)+η1^2*(cos(θ2)*Vt2+sin(θ2)*Vr2)+η2^2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η1^2*(-1.0*θ2*cos(θ2)*Vr2-1.0*cos(θ2)*Vt2+θ2*sin(θ2)*Vt2)+
         η1*η2*((sin(θ2)+θ2*cos(θ2))*Vr2+2.0*cos(θ2)*Vt2-1.0*θ2*sin(θ2)*Vt2)+η2^2*(-1.0*sin(θ2)*Vr2-1.0*cos(θ2)*Vt2))))/(sin(θ1)^2*(2.0*η1*η2*cos(θ2)^2+η2^2*
         (-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*(η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+
         θ1*(η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    B2 = ((cos(θ1)^2*
         (η1^2*(θ2^2*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1*(η1*η2*(θ2*cos(θ2)^2+cos(θ2)*sin(θ2)+θ2*sin(θ2)^2)+η1^2*(-1.0*θ2*cos(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*sin(θ2)^2)))+sin(θ1)^2*(
         η1*η2*cos(θ2)^2+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1*
         (η1*η2*(θ2*cos(θ2)^2+cos(θ2)*sin(θ2)+θ2*sin(θ2)^2)+η1^2*(-1.0*θ2*cos(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+η1^2*(θ2*sin(θ2)^2+cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)))*Vr0+(sin(θ1)^2*
         (θ1*(η1^2*cos(θ2)^2-1.0*η1*η2*cos(θ2)^2)+η1*η2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2))+cos(θ1)^2*
         (θ1*(η1^2*cos(θ2)^2-1.0*η1*η2*cos(θ2)^2)+η1^2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2))+cos(θ1)*sin(θ1)*(η1^2*cos(θ2)^2-1.0*η1*η2*cos(θ2)^2))*Vt0+
         cos(θ1)*sin(θ1)*(η1^2*(-1.0*θ2*cos(θ2)*Vr2-1.0*cos(θ2)*Vt2+θ2*sin(θ2)*Vt2)+η1*η2*(θ2*cos(θ2)*Vr2+cos(θ2)*Vt2-1.0*θ2*sin(θ2)*Vt2))+sin(θ1)^2*(θ1*
         (η1*η2*(-1.0*θ2*sin(θ2)*Vt2+cos(θ2)*Vt2+θ2*cos(θ2)*Vr2)+η1^2*(θ2*sin(θ2)*Vt2-1.0*cos(θ2)*Vt2-1.0*θ2*cos(θ2)*Vr2))+θ1^2*
         (η1^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η2^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η1*η2*(2.0*sin(θ2)*Vt2-2.0*cos(θ2)*Vr2))+η2^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η1*η2*
         ((θ2*sin(θ2)+cos(θ2))*Vr2+θ2*cos(θ2)*Vt2))+cos(θ1)^2*(θ1*
         (η1*η2*(-1.0*θ2*sin(θ2)*Vt2+cos(θ2)*Vt2+θ2*cos(θ2)*Vr2)+η1^2*(θ2*sin(θ2)*Vt2-1.0*cos(θ2)*Vt2-1.0*θ2*cos(θ2)*Vr2))+θ1^2*
         (η1^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η2^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η1*η2*(2.0*sin(θ2)*Vt2-2.0*cos(θ2)*Vr2))+η1^2*(θ2*sin(θ2)*Vr2+θ2*cos(θ2)*Vt2+sin(θ2)*Vt2)))/(
         sin(θ1)^2*(2.0*η1*η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    C2 =  -(1.0*((sin(θ1)^2*(η1*η2*(sin(θ2)^2+cos(θ2)^2)-1.0*η1^2*cos(θ2)^2)+η1^2*cos(θ1)^2*sin(θ2)^2)*Vr0+(sin(θ1)^2*
         (η1^2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)^2*
         (η1^2*(-1.0*θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)-1.0*θ2*cos(θ2)^2)+θ1*(η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η1*η2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(sin(θ2)^2+cos(θ2)^2)))*Vt0+cos(θ1)*sin(θ1)*(η1*η2*(sin(θ2)*Vr2+cos(θ2)*Vt2)+η1^2*(-1.0*sin(θ2)*Vr2-1.0*cos(θ2)*Vt2))+
         sin(θ1)^2*
         (θ1*(η1^2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η1*η2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η1*η2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η1^2*((θ2*sin(θ2)+cos(θ2))*Vr2+θ2*cos(θ2)*Vt2))
         +cos(θ1)^2*(θ1*(η1^2*(-1.0*cos(θ2)*Vt2-1.0*sin(θ2)*Vr2)+η1*η2*(cos(θ2)*Vt2+sin(θ2)*Vr2))+η1^2*(θ2*sin(θ2)*Vr2+θ2*cos(θ2)*Vt2+sin(θ2)*Vt2))))/(sin(θ1)^2*(2.0*η1*η2*
         cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    D2 = -(1.0*((sin(θ1)^2*(η1^2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)^2*
         (η1^2*(θ2*sin(θ2)^2-1.0*cos(θ2)*sin(θ2)+θ2*cos(θ2)^2)+θ1*(η1*η2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(-1.0*cos(θ2)^2-1.0*sin(θ2)^2)))+cos(θ1)*sin(θ1)*
         (η1*η2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(sin(θ2)^2+cos(θ2)^2)))*Vr0+(sin(θ1)^2*(η1^2*cos(θ2)^2+η1*η2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2))-1.0*η1^2*cos(θ1)^2*sin(θ2)^2)*Vt0+
         cos(θ1)*sin(θ1)*(η1^2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2)+η1*η2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2))+cos(θ1)^2*
         (θ1*(η1^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η1*η2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2))+η1^2*((sin(θ2)-1.0*θ2*cos(θ2))*Vr2+θ2*sin(θ2)*Vt2))+sin(θ1)^2*(θ1*
         (η1^2*(cos(θ2)*Vr2-1.0*sin(θ2)*Vt2)+η1*η2*(sin(θ2)*Vt2-1.0*cos(θ2)*Vr2))+η1^2*(-1.0*θ2*cos(θ2)*Vr2-1.0*cos(θ2)*Vt2+θ2*sin(θ2)*Vt2)+η1*η2*(sin(θ2)*Vr2+cos(θ2)*Vt2))
         ))/(sin(θ1)^2*(2.0*η1*η2*cos(θ2)^2+η2^2*(-1.0*sin(θ2)^2-1.0*cos(θ2)^2)+η1^2*(θ2^2*sin(θ2)^2+(θ2^2-1.0)*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)^2*(η1^2*((θ2^2-1.0)*sin(θ2)^2+θ2^2*cos(θ2)^2)+θ1^2*
         (η2^2*(cos(θ2)^2+sin(θ2)^2)+η1^2*(cos(θ2)^2+sin(θ2)^2)+η1*η2*(-2.0*cos(θ2)^2-2.0*sin(θ2)^2))+θ1*
         (η1*η2*(2.0*θ2*cos(θ2)^2+2.0*θ2*sin(θ2)^2)+η1^2*(-2.0*θ2*cos(θ2)^2-2.0*θ2*sin(θ2)^2)))+cos(θ1)*sin(θ1)*(2.0*η1^2*cos(θ2)*sin(θ2)-2.0*η1*η2*cos(θ2)*sin(θ2)));
    return (A1, B1, C1, D1, A2, B2, C2, D2)
end

function ComputeLocation( X, c, params )
    @unpack θ1, θ2, η1, η2, Vr0, Vt0, Vr2, Vt2 = params
    r = sqrt(X[1]^2 + X[2]^2)
    θ = atan(X[2]/X[1])
    # Corner facing up or
    if sign(θ1) == -1
        if (θ >= 0.) θ -= π end
    else
        if (θ <= 0.) θ += π end
    end
    # Define which corner is which
    ind1, ind2 = false, false
    if sign(θ1) == -1
        if (θ>=θ1)        ind1   = true end
        if (θ<θ1 && θ>θ2) ind2   = true end
    else
        if (θ<=θ1)        ind1   = true end
        if (θ>θ1 && θ<θ2) ind2   = true end
    end
    η, A, B, C, D = NaN, NaN, NaN, NaN, NaN
    if ind1 == true
        η = η1
        A = c[1]
        B = c[2]
        C = c[3]
        D = c[4]
    elseif ind2 == true
        η = η2
        A = c[5]
        B = c[6]
        C = c[7]
        D = c[8]
    end
    return r, θ, η, A, B, C, D, ind1, ind2
end

function Stokes2D_Moulas2021_p( X, c, params ) 
    @unpack θ1, θ2, η1, η2, Vr0, Vt0, Vr2, Vt2 = params
    # Compute location
    r, θ, η, A, B, C, D, ind1, ind2 = ComputeLocation( X, c, params )
    # Pressure in both corners
    p   =  -(-2*η*cos(θ)*C - 2*η*sin(θ)*D)/r
    return p
end

function Stokes2D_Moulas2021_V( X, c, params ) 
    @unpack θ1, θ2, η1, η2, Vr0, Vt0, Vr2, Vt2 = params
    # Compute location
    r, θ, η, A, B, C, D, ind1, ind2 = ComputeLocation( X, c, params )
    # Velocity in both corners
    Vr  = -A*sin(θ) + B*cos(θ)  +C*cos(θ)-C*θ*sin(θ)+D*sin(θ)+D*θ*cos(θ)
    Vt  = -A*cos(θ) - B*sin(θ) - C*θ*cos(θ) - D*θ*sin(θ)
    𝑉   = @SVector([Vr; Vt])
    R   = @SMatrix([cos(θ) -sin(θ); sin(θ) cos(θ)])
    return V = R*𝑉
end

function Stokes2D_Moulas2021_σrt( X, c, params ) 
    @unpack θ1, θ2, η1, η2, Vr0, Vt0, Vr2, Vt2 = params
    r, θ, η, A, B, C, D, ind1, ind2 = ComputeLocation( X, c, params )
    σrt = η*((cos(θ)*A+sin(θ)*B+θ*cos(θ)*C+θ*sin(θ)*D)/r+
        (-cos(θ)*A-sin(θ)*B-θ*cos(θ)*C-2*sin(θ)*C+2*cos(θ)*D-θ*sin(θ)*D)/r);
    return σrt
end

@doc raw"""
    sol = Stokes2D_Moulas2021(x; params)  

Evaluates the analytical solution of [Moulas et al. (2021)](https://academic.oup.com/gji/article/227/1/576/6309899):

    x      : is the coordinate vector or tuple 
    params : optional parameter array, default = params = (θ1  =  30π/180, θ2  = 180π/180, η1  = 1e0, η2  = 1e3, Vr0 = -1., Vt0 =  0., Vr2 =  0., Vt2 =  0.,) 
and returns:

    sol    : tuple containing the solution fields p (pressure), V (velocity vector), L (velocity gratdient tensor), ε̇ (deviatoric strain rate tensor) and τ (deviatoric stress tensor)

# Examples
```julia-repl
julia> Stokes2D_Moulas2021( [1, 1] )
(p = 12.53061977287755, V = [-0.010899335607440476, 0.02773892842336736], L = [0.0028483768768197255 -0.0028483768768197255; 0.0028483768768197246 -0.0028483768768197246], ε̇ = [0.0028483768768197255 -4.336808689942018e-19; -4.336808689942018e-19 -0.0028483768768197246], τ = [5.696753753639451 -8.673617379884035e-16; -8.673617379884035e-16 -5.696753753639449], η = 1000.0)
```
```julia-repl
julia> Stokes2D_Moulas2021( (1, 1) )
(p = 12.53061977287755, V = (x = -0.010899335607440476, y = 0.02773892842336736), L = (xx = 0.0028483768768197255, xy = -0.0028483768768197255, yx = 0.0028483768768197246, yy = -0.0028483768768197246), ε̇ = (xx = 0.0028483768768197255, xy = -4.336808689942018e-19, yx = -4.336808689942018e-19, yy = -0.0028483768768197246), τ = (xx = 5.696753753639451, xy = -8.673617379884035e-16, yx = -8.673617379884035e-16, yy = -5.696753753639449), η = 1000.0)
```
"""
function Stokes2D_Moulas2021(X;
    params = (
        θ1  =  30π/180, 
        θ2  = 180π/180, 
        η1  = 1e0, 
        η2  = 1e3, 
        Vr0 = -1., 
        Vt0 =  0., 
        Vr2 =  0., 
        Vt2 =  0.,) )
    # Constants
    c = ComputeConstants( params )
    # Check position
    r, θ, η, ind1, ind2 = ComputeLocation( X, c, params)
    p = Stokes2D_Moulas2021_p(X, c, params)
    v = Stokes2D_Moulas2021_V(X, c, params)
    # L = Stokes2D_Schmid2003_L(x, params) # just to check if automatic derivatives are correct
    f_cl = x -> Stokes2D_Moulas2021_V(x, c, params)
    L = ForwardDiff.jacobian(f_cl, X)
    # Postprocess deviatoric stress and strain rate
    ε̇ = 1/2*(L + L')
    τ = 2*η*ε̇
    # # CHECK: normal deviatoric stress components should vanish in polar coordinates
    # # Rotation matrix
    # R = @SMatrix([cos(θ) -sin(θ); sin(θ) cos(θ)])
    # τ_rot = R'*τ*R
    # # CHECK: shear stress in polar coordinates should equate the analytical solution
    # τ =  Stokes2D_Moulas2021_σrt( X, c, params ) 
    # τrt[i,j] = τ_rot[1,2]
    # @show τ_rot[1,1], abs(τ_rot[1,2] - τ), ε̇[1,1]+ε̇[2,2]
    return (p=p, V=v, L=L, ε̇=ε̇, τ=τ, η=η)
end

function Stokes2D_Moulas2021(coords::Tuple;
    params = (
        θ1  =  30π/180, 
        θ2  = 180π/180, 
        η1  = 1e0, 
        η2  = 1e3, 
        Vr0 = -1., 
        Vt0 =  0., 
        Vr2 =  0., 
        Vt2 =  0.,)  )
    X = SVector(values(coords)...)
    sol = Stokes2D_Moulas2021(X; params)
    return (p=sol.p, 
    V=(x=sol.V[1], y=sol.V[2]),
    L=(xx=sol.L[1,1], xy=sol.L[1,2], yx=sol.L[2,1], yy=sol.L[2,2]), 
    ε̇=(xx=sol.ε̇[1,1], xy=sol.ε̇[1,2], yx=sol.ε̇[2,1], yy=sol.ε̇[2,2]), 
    τ=(xx=sol.τ[1,1], xy=sol.τ[1,2], yx=sol.τ[2,1], yy=sol.τ[2,2]),
    η=sol.η) 
end